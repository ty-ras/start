name: Build, test, and publish

on:
  workflow_call:
    inputs:
      fetch-depth:
        required: true
        type: number
      pre-run-function:
        required: false
        type: string
        default: |
          tyras_pre_run ()
          {
            echo 'No pre-run.'
          }
      post-run-function:
        required: false
        type: string
        default: |
          tyras_post_run ()
          {
            TYRAS_GIT_ROOT="$(pwd)"
            cd code
            cp "${TYRAS_GIT_ROOT}/LICENSE" ./LICENSE.txt
            # Note - yarn doesn't have functionality to install package without saving it to package.json (!)
            # So we use global install instead.
            yarn global add "@jsdevtools/npm-publish@$(cat "${TYRAS_GIT_ROOT}/versions/npm-publish")"
            npm-publish --dry-run --access public
          }
    secrets:
      npm-publish-token:
        required: false

jobs:
  # The tests are running in parallel.
  # Before that, set up the cache so that each runner in parallel stage won't need to separately download and install a bunch of packages.
  setup-cache:
    uses: ./.github/workflows/cache.yml

  # Run the tests now
  test:
    needs: setup-cache
    uses: ./.github/workflows/test.yml

  # Now we can build + run other tasks
  build:
    needs: test
    runs-on: ubuntu-latest
    name: Build and test
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: ${{ inputs.fetch-depth }}

      - id: prepare
        name: Prepare
        shell: bash
        run: |
          set -e

          ${{ inputs.pre-run-function }}
          tyras_pre_run

      - id: restore-modules-from-cache
        name: Retrieve installed Yarn packages from cache
        uses: actions/cache@v3
        env:
          cache-name: cache-modules
        with:
          # Our install script uses this as yarn cache directory
          path: code/node_modules
          # We don't need OS in cache key, as we run yarn always via Docker (Alpine image)
          key: ${{ env.cache-name }}-${{ hashFiles('code/yarn.lock') }}
          # If there is no cache at this point, it is either internal error, or concurrent cache invalidation
          # In any case, fail.
          fail-on-cache-miss: true

      - id: lint
        name: Lint
        shell: bash
        run: |
          set -e

          ./scripts/lint.sh

      - id: compile
        name: Compile
        shell: bash
        run: |
          set -e

          ./scripts/build.sh ci

      # - id: coverage
      #   name: Upload coverage
      #   uses: codecov/codecov-action@v3
      #   with:
      #     directory: code

      - id: finalize
        name: Finalize
        shell: bash
        run: |
          set -e

          ${{ inputs.post-run-function }}
          tyras_post_run
        env:
          NPM_PUBLISH_TOKEN: ${{ secrets.npm-publish-token }}
